#!/bin/bash
# File: arduino-debugger - auto-launch debugger
# Desc: linux specific debugger using avarice and avr-gdb
#       note: this might work on Mac OS/X (not tested)
#
# Author: Rick Kimball
# 

#set -x
export ARG_CNT="$#"

if [ ${ARG_CNT} -lt 3 ]; then
  echo "usage: $0 [-d0|-d1] arduino_build_tmp_path sketch [no_upload]"
  echo " debug flag             - avarice debug flags [-d0 silent|-d1 verbose]"
  echo " arduino_build_tmp_path - the temp /tmp/arduino_build_nnnnn directory"
  echo " sketch                 - the sketch name .. blink.ino"
  echo " [no_upload]            - optionally skip upload, just debug"
  echo " example:"
  echo "   $0 -d1 /tmp/arduino_build_433659 blink.ino"
  exit 1
fi

export GDB_PORT=4242

export TOOLS_DIR=$(dirname $0)
export DEBUG_FLG=${1}
export BUILD_DIR=${2}
export SKETCH=${3}
export BIN_FILE=${BUILD_DIR}/${3}.bin
export HEX_FILE=${BUILD_DIR}/${3}.hex
export ELF_FILE=${BUILD_DIR}/${3}.elf
export JTAG_SPEED=${4:-3000kHz}
export LOAD_CMD=${5:-echo noload}

#----------------------------------------------------------------------------
cd "${BUILD_DIR}"

#----------------------------------------------------------------------------
# start up avarice gdb server in the background
xterm -geometry 80x43 \
       -T 'Arduino GDB Server' \
       -e avarice -g -j usb --jtag-bitrate ${JTAG_SPEED} \
           --reset-srst :${GDB_PORT} &

#----------------------------------------------------------------------------
# start up the avr-gdb ui and wait for it to exit
xterm -geometry 100x45 -bg \#ffffe0 -fg \#000000 \
       -T 'Arduino Debugger' \
       -e avr-gdb \
       -ex 'set pagination off' \
       -ex 'set confirm off' \
       -ex "target remote :${GDB_PORT}" \
       -ex 'mon reset' \
       -ex "${LOAD_CMD}" \
       -ex 'tbreak setup' \
       -ex 'layout split' \
       -ex 'continue' \
       "${ELF_FILE}"

exit 0
